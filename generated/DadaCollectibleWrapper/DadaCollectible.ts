// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Assigned extends ethereum.Event {
  get params(): Assigned__Params {
    return new Assigned__Params(this);
  }
}

export class Assigned__Params {
  _event: Assigned;

  constructor(event: Assigned) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collectibleIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get printIndex(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CollectibleTransfer extends ethereum.Event {
  get params(): CollectibleTransfer__Params {
    return new CollectibleTransfer__Params(this);
  }
}

export class CollectibleTransfer__Params {
  _event: CollectibleTransfer;

  constructor(event: CollectibleTransfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get collectibleIndex(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get printIndex(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class CollectibleOffered extends ethereum.Event {
  get params(): CollectibleOffered__Params {
    return new CollectibleOffered__Params(this);
  }
}

export class CollectibleOffered__Params {
  _event: CollectibleOffered;

  constructor(event: CollectibleOffered) {
    this._event = event;
  }

  get collectibleIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get printIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get minValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get toAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get lastSellValue(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class CollectibleBidEntered extends ethereum.Event {
  get params(): CollectibleBidEntered__Params {
    return new CollectibleBidEntered__Params(this);
  }
}

export class CollectibleBidEntered__Params {
  _event: CollectibleBidEntered;

  constructor(event: CollectibleBidEntered) {
    this._event = event;
  }

  get collectibleIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get printIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get fromAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class CollectibleBidWithdrawn extends ethereum.Event {
  get params(): CollectibleBidWithdrawn__Params {
    return new CollectibleBidWithdrawn__Params(this);
  }
}

export class CollectibleBidWithdrawn__Params {
  _event: CollectibleBidWithdrawn;

  constructor(event: CollectibleBidWithdrawn) {
    this._event = event;
  }

  get collectibleIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get printIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get fromAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class CollectibleBought extends ethereum.Event {
  get params(): CollectibleBought__Params {
    return new CollectibleBought__Params(this);
  }
}

export class CollectibleBought__Params {
  _event: CollectibleBought;

  constructor(event: CollectibleBought) {
    this._event = event;
  }

  get collectibleIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get printIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get fromAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get toAddress(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class CollectibleNoLongerForSale extends ethereum.Event {
  get params(): CollectibleNoLongerForSale__Params {
    return new CollectibleNoLongerForSale__Params(this);
  }
}

export class CollectibleNoLongerForSale__Params {
  _event: CollectibleNoLongerForSale;

  constructor(event: CollectibleNoLongerForSale) {
    this._event = event;
  }

  get collectibleIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get printIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DadaCollectible__OfferedForSaleResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;
  value3: Address;
  value4: BigInt;
  value5: Address;
  value6: BigInt;

  constructor(
    value0: boolean,
    value1: BigInt,
    value2: BigInt,
    value3: Address,
    value4: BigInt,
    value5: Address,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class DadaCollectible__drawingIdToCollectiblesResult {
  value0: BigInt;
  value1: string;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;
  value5: BigInt;
  value6: BigInt;
  value7: string;
  value8: BigInt;
  value9: string;

  constructor(
    value0: BigInt,
    value1: string,
    value2: BigInt,
    value3: BigInt,
    value4: boolean,
    value5: BigInt,
    value6: BigInt,
    value7: string,
    value8: BigInt,
    value9: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromString(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromString(this.value9));
    return map;
  }
}

export class DadaCollectible__BidsResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;
  value3: Address;
  value4: BigInt;

  constructor(
    value0: boolean,
    value1: BigInt,
    value2: BigInt,
    value3: Address,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class DadaCollectible extends ethereum.SmartContract {
  static bind(address: Address): DadaCollectible {
    return new DadaCollectible("DadaCollectible", address);
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  transfer(to: Address, drawingId: BigInt, printIndex: BigInt): boolean {
    let result = super.call(
      "transfer",
      "transfer(address,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(drawingId),
        ethereum.Value.fromUnsignedBigInt(printIndex)
      ]
    );

    return result[0].toBoolean();
  }

  try_transfer(
    to: Address,
    drawingId: BigInt,
    printIndex: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transfer",
      "transfer(address,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(drawingId),
        ethereum.Value.fromUnsignedBigInt(printIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balances(param0: Address): BigInt {
    let result = super.call("balances", "balances(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_balances(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balances", "balances(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  OfferedForSale(param0: BigInt): DadaCollectible__OfferedForSaleResult {
    let result = super.call(
      "OfferedForSale",
      "OfferedForSale(uint256):(bool,uint256,uint256,address,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new DadaCollectible__OfferedForSaleResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toAddress(),
      result[6].toBigInt()
    );
  }

  try_OfferedForSale(
    param0: BigInt
  ): ethereum.CallResult<DadaCollectible__OfferedForSaleResult> {
    let result = super.tryCall(
      "OfferedForSale",
      "OfferedForSale(uint256):(bool,uint256,uint256,address,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DadaCollectible__OfferedForSaleResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toAddress(),
        value[6].toBigInt()
      )
    );
  }

  DrawingPrintToAddress(param0: BigInt): Address {
    let result = super.call(
      "DrawingPrintToAddress",
      "DrawingPrintToAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_DrawingPrintToAddress(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "DrawingPrintToAddress",
      "DrawingPrintToAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  drawingIdToCollectibles(
    param0: BigInt
  ): DadaCollectible__drawingIdToCollectiblesResult {
    let result = super.call(
      "drawingIdToCollectibles",
      "drawingIdToCollectibles(uint256):(uint256,string,uint256,uint256,bool,uint256,uint256,string,uint256,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new DadaCollectible__drawingIdToCollectiblesResult(
      result[0].toBigInt(),
      result[1].toString(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toString(),
      result[8].toBigInt(),
      result[9].toString()
    );
  }

  try_drawingIdToCollectibles(
    param0: BigInt
  ): ethereum.CallResult<DadaCollectible__drawingIdToCollectiblesResult> {
    let result = super.tryCall(
      "drawingIdToCollectibles",
      "drawingIdToCollectibles(uint256):(uint256,string,uint256,uint256,bool,uint256,uint256,string,uint256,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DadaCollectible__drawingIdToCollectiblesResult(
        value[0].toBigInt(),
        value[1].toString(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toString(),
        value[8].toBigInt(),
        value[9].toString()
      )
    );
  }

  balanceOf(_owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  Bids(param0: BigInt): DadaCollectible__BidsResult {
    let result = super.call(
      "Bids",
      "Bids(uint256):(bool,uint256,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new DadaCollectible__BidsResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt()
    );
  }

  try_Bids(param0: BigInt): ethereum.CallResult<DadaCollectible__BidsResult> {
    let result = super.tryCall(
      "Bids",
      "Bids(uint256):(bool,uint256,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DadaCollectible__BidsResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt()
      )
    );
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  pendingWithdrawals(param0: Address): BigInt {
    let result = super.call(
      "pendingWithdrawals",
      "pendingWithdrawals(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_pendingWithdrawals(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingWithdrawals",
      "pendingWithdrawals(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class FlipSwitchToCall extends ethereum.Call {
  get inputs(): FlipSwitchToCall__Inputs {
    return new FlipSwitchToCall__Inputs(this);
  }

  get outputs(): FlipSwitchToCall__Outputs {
    return new FlipSwitchToCall__Outputs(this);
  }
}

export class FlipSwitchToCall__Inputs {
  _call: FlipSwitchToCall;

  constructor(call: FlipSwitchToCall) {
    this._call = call;
  }

  get state(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class FlipSwitchToCall__Outputs {
  _call: FlipSwitchToCall;

  constructor(call: FlipSwitchToCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get drawingId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get printIndex(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BuyCollectibleCall extends ethereum.Call {
  get inputs(): BuyCollectibleCall__Inputs {
    return new BuyCollectibleCall__Inputs(this);
  }

  get outputs(): BuyCollectibleCall__Outputs {
    return new BuyCollectibleCall__Outputs(this);
  }
}

export class BuyCollectibleCall__Inputs {
  _call: BuyCollectibleCall;

  constructor(call: BuyCollectibleCall) {
    this._call = call;
  }

  get drawingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get printIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyCollectibleCall__Outputs {
  _call: BuyCollectibleCall;

  constructor(call: BuyCollectibleCall) {
    this._call = call;
  }
}

export class AcceptBidForCollectibleCall extends ethereum.Call {
  get inputs(): AcceptBidForCollectibleCall__Inputs {
    return new AcceptBidForCollectibleCall__Inputs(this);
  }

  get outputs(): AcceptBidForCollectibleCall__Outputs {
    return new AcceptBidForCollectibleCall__Outputs(this);
  }
}

export class AcceptBidForCollectibleCall__Inputs {
  _call: AcceptBidForCollectibleCall;

  constructor(call: AcceptBidForCollectibleCall) {
    this._call = call;
  }

  get drawingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get printIndex(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AcceptBidForCollectibleCall__Outputs {
  _call: AcceptBidForCollectibleCall;

  constructor(call: AcceptBidForCollectibleCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class MakeCollectibleUnavailableToSaleCall extends ethereum.Call {
  get inputs(): MakeCollectibleUnavailableToSaleCall__Inputs {
    return new MakeCollectibleUnavailableToSaleCall__Inputs(this);
  }

  get outputs(): MakeCollectibleUnavailableToSaleCall__Outputs {
    return new MakeCollectibleUnavailableToSaleCall__Outputs(this);
  }
}

export class MakeCollectibleUnavailableToSaleCall__Inputs {
  _call: MakeCollectibleUnavailableToSaleCall;

  constructor(call: MakeCollectibleUnavailableToSaleCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get drawingId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get printIndex(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get lastSellValue(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class MakeCollectibleUnavailableToSaleCall__Outputs {
  _call: MakeCollectibleUnavailableToSaleCall;

  constructor(call: MakeCollectibleUnavailableToSaleCall) {
    this._call = call;
  }
}

export class OfferCollectibleForSaleToAddressCall extends ethereum.Call {
  get inputs(): OfferCollectibleForSaleToAddressCall__Inputs {
    return new OfferCollectibleForSaleToAddressCall__Inputs(this);
  }

  get outputs(): OfferCollectibleForSaleToAddressCall__Outputs {
    return new OfferCollectibleForSaleToAddressCall__Outputs(this);
  }
}

export class OfferCollectibleForSaleToAddressCall__Inputs {
  _call: OfferCollectibleForSaleToAddressCall;

  constructor(call: OfferCollectibleForSaleToAddressCall) {
    this._call = call;
  }

  get drawingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get printIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minSalePriceInWei(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get toAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class OfferCollectibleForSaleToAddressCall__Outputs {
  _call: OfferCollectibleForSaleToAddressCall;

  constructor(call: OfferCollectibleForSaleToAddressCall) {
    this._call = call;
  }
}

export class EnterBidForCollectibleCall extends ethereum.Call {
  get inputs(): EnterBidForCollectibleCall__Inputs {
    return new EnterBidForCollectibleCall__Inputs(this);
  }

  get outputs(): EnterBidForCollectibleCall__Outputs {
    return new EnterBidForCollectibleCall__Outputs(this);
  }
}

export class EnterBidForCollectibleCall__Inputs {
  _call: EnterBidForCollectibleCall;

  constructor(call: EnterBidForCollectibleCall) {
    this._call = call;
  }

  get drawingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get printIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EnterBidForCollectibleCall__Outputs {
  _call: EnterBidForCollectibleCall;

  constructor(call: EnterBidForCollectibleCall) {
    this._call = call;
  }
}

export class MintNewDrawingsCall extends ethereum.Call {
  get inputs(): MintNewDrawingsCall__Inputs {
    return new MintNewDrawingsCall__Inputs(this);
  }

  get outputs(): MintNewDrawingsCall__Outputs {
    return new MintNewDrawingsCall__Outputs(this);
  }
}

export class MintNewDrawingsCall__Inputs {
  _call: MintNewDrawingsCall;

  constructor(call: MintNewDrawingsCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintNewDrawingsCall__Outputs {
  _call: MintNewDrawingsCall;

  constructor(call: MintNewDrawingsCall) {
    this._call = call;
  }
}

export class Alt_buyCollectibleCall extends ethereum.Call {
  get inputs(): Alt_buyCollectibleCall__Inputs {
    return new Alt_buyCollectibleCall__Inputs(this);
  }

  get outputs(): Alt_buyCollectibleCall__Outputs {
    return new Alt_buyCollectibleCall__Outputs(this);
  }
}

export class Alt_buyCollectibleCall__Inputs {
  _call: Alt_buyCollectibleCall;

  constructor(call: Alt_buyCollectibleCall) {
    this._call = call;
  }

  get drawingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get printIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Alt_buyCollectibleCall__Outputs {
  _call: Alt_buyCollectibleCall;

  constructor(call: Alt_buyCollectibleCall) {
    this._call = call;
  }
}

export class WithdrawOfferForCollectibleCall extends ethereum.Call {
  get inputs(): WithdrawOfferForCollectibleCall__Inputs {
    return new WithdrawOfferForCollectibleCall__Inputs(this);
  }

  get outputs(): WithdrawOfferForCollectibleCall__Outputs {
    return new WithdrawOfferForCollectibleCall__Outputs(this);
  }
}

export class WithdrawOfferForCollectibleCall__Inputs {
  _call: WithdrawOfferForCollectibleCall;

  constructor(call: WithdrawOfferForCollectibleCall) {
    this._call = call;
  }

  get drawingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get printIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawOfferForCollectibleCall__Outputs {
  _call: WithdrawOfferForCollectibleCall;

  constructor(call: WithdrawOfferForCollectibleCall) {
    this._call = call;
  }
}

export class NewCollectibleCall extends ethereum.Call {
  get inputs(): NewCollectibleCall__Inputs {
    return new NewCollectibleCall__Inputs(this);
  }

  get outputs(): NewCollectibleCall__Outputs {
    return new NewCollectibleCall__Outputs(this);
  }
}

export class NewCollectibleCall__Inputs {
  _call: NewCollectibleCall;

  constructor(call: NewCollectibleCall) {
    this._call = call;
  }

  get drawingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get checkSum(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _totalSupply(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get initialPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get initialPrintIndex(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get collectionName(): string {
    return this._call.inputValues[5].value.toString();
  }

  get authorUId(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get scarcity(): string {
    return this._call.inputValues[7].value.toString();
  }
}

export class NewCollectibleCall__Outputs {
  _call: NewCollectibleCall;

  constructor(call: NewCollectibleCall) {
    this._call = call;
  }
}

export class OfferCollectibleForSaleCall extends ethereum.Call {
  get inputs(): OfferCollectibleForSaleCall__Inputs {
    return new OfferCollectibleForSaleCall__Inputs(this);
  }

  get outputs(): OfferCollectibleForSaleCall__Outputs {
    return new OfferCollectibleForSaleCall__Outputs(this);
  }
}

export class OfferCollectibleForSaleCall__Inputs {
  _call: OfferCollectibleForSaleCall;

  constructor(call: OfferCollectibleForSaleCall) {
    this._call = call;
  }

  get drawingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get printIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minSalePriceInWei(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class OfferCollectibleForSaleCall__Outputs {
  _call: OfferCollectibleForSaleCall;

  constructor(call: OfferCollectibleForSaleCall) {
    this._call = call;
  }
}

export class WithdrawBidForCollectibleCall extends ethereum.Call {
  get inputs(): WithdrawBidForCollectibleCall__Inputs {
    return new WithdrawBidForCollectibleCall__Inputs(this);
  }

  get outputs(): WithdrawBidForCollectibleCall__Outputs {
    return new WithdrawBidForCollectibleCall__Outputs(this);
  }
}

export class WithdrawBidForCollectibleCall__Inputs {
  _call: WithdrawBidForCollectibleCall;

  constructor(call: WithdrawBidForCollectibleCall) {
    this._call = call;
  }

  get drawingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get printIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawBidForCollectibleCall__Outputs {
  _call: WithdrawBidForCollectibleCall;

  constructor(call: WithdrawBidForCollectibleCall) {
    this._call = call;
  }
}
