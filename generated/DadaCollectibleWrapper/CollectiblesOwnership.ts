// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CollectibleIssued extends ethereum.Event {
  get params(): CollectibleIssued__Params {
    return new CollectibleIssued__Params(this);
  }
}

export class CollectibleIssued__Params {
  _event: CollectibleIssued;

  constructor(event: CollectibleIssued) {
    this._event = event;
  }

  get collectibleOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get purchaser(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get collectibleId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get collectionBaseItemId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get issuedTime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get printNumber(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class ContractUpgrade extends ethereum.Event {
  get params(): ContractUpgrade__Params {
    return new ContractUpgrade__Params(this);
  }
}

export class ContractUpgrade__Params {
  _event: ContractUpgrade;

  constructor(event: ContractUpgrade) {
    this._event = event;
  }

  get newContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }
}

export class Pause extends ethereum.Event {
  get params(): Pause__Params {
    return new Pause__Params(this);
  }
}

export class Pause__Params {
  _event: Pause;

  constructor(event: Pause) {
    this._event = event;
  }
}

export class Unpause extends ethereum.Event {
  get params(): Unpause__Params {
    return new Unpause__Params(this);
  }
}

export class Unpause__Params {
  _event: Unpause;

  constructor(event: Unpause) {
    this._event = event;
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class CollectiblesOwnership__collectiblesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class CollectiblesOwnership__pushCollectibleResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class CollectiblesOwnership__collectibleInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: string;
  value9: string;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: string,
    value9: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromString(this.value8));
    map.set("value9", ethereum.Value.fromString(this.value9));
    return map;
  }
}

export class CollectiblesOwnership extends ethereum.SmartContract {
  static bind(address: Address): CollectiblesOwnership {
    return new CollectiblesOwnership("CollectiblesOwnership", address);
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  cfoAddress(): Address {
    let result = super.call("cfoAddress", "cfoAddress():(address)", []);

    return result[0].toAddress();
  }

  try_cfoAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("cfoAddress", "cfoAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  collectibles(param0: BigInt): CollectiblesOwnership__collectiblesResult {
    let result = super.call(
      "collectibles",
      "collectibles(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new CollectiblesOwnership__collectiblesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_collectibles(
    param0: BigInt
  ): ethereum.CallResult<CollectiblesOwnership__collectiblesResult> {
    let result = super.tryCall(
      "collectibles",
      "collectibles(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CollectiblesOwnership__collectiblesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  ceoAddress(): Address {
    let result = super.call("ceoAddress", "ceoAddress():(address)", []);

    return result[0].toAddress();
  }

  try_ceoAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("ceoAddress", "ceoAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  implementsERC721(): boolean {
    let result = super.call(
      "implementsERC721",
      "implementsERC721():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_implementsERC721(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "implementsERC721",
      "implementsERC721():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collectiblePrintNumber(_collectibleId: BigInt): BigInt {
    let result = super.call(
      "collectiblePrintNumber",
      "collectiblePrintNumber(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_collectibleId)]
    );

    return result[0].toBigInt();
  }

  try_collectiblePrintNumber(
    _collectibleId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collectiblePrintNumber",
      "collectiblePrintNumber(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_collectibleId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balances(param0: Address): BigInt {
    let result = super.call("balances", "balances(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_balances(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balances", "balances(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collectibleIssuedTime(_collectibleId: BigInt): BigInt {
    let result = super.call(
      "collectibleIssuedTime",
      "collectibleIssuedTime(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_collectibleId)]
    );

    return result[0].toBigInt();
  }

  try_collectibleIssuedTime(
    _collectibleId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collectibleIssuedTime",
      "collectibleIssuedTime(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_collectibleId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(to: Address, tokenId: BigInt): boolean {
    let result = super.call("mint", "mint(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_mint(to: Address, tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("mint", "mint(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pushCollectible(
    _collectionBaseItemId: BigInt,
    _issuedTime: BigInt
  ): CollectiblesOwnership__pushCollectibleResult {
    let result = super.call(
      "pushCollectible",
      "pushCollectible(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_collectionBaseItemId),
        ethereum.Value.fromUnsignedBigInt(_issuedTime)
      ]
    );

    return new CollectiblesOwnership__pushCollectibleResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_pushCollectible(
    _collectionBaseItemId: BigInt,
    _issuedTime: BigInt
  ): ethereum.CallResult<CollectiblesOwnership__pushCollectibleResult> {
    let result = super.tryCall(
      "pushCollectible",
      "pushCollectible(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_collectionBaseItemId),
        ethereum.Value.fromUnsignedBigInt(_issuedTime)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CollectiblesOwnership__pushCollectibleResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dadaPercentageFirstBuy(): BigInt {
    let result = super.call(
      "dadaPercentageFirstBuy",
      "dadaPercentageFirstBuy():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_dadaPercentageFirstBuy(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dadaPercentageFirstBuy",
      "dadaPercentageFirstBuy():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokensOf(_owner: Address): Array<BigInt> {
    let result = super.call("tokensOf", "tokensOf(address):(uint256[])", [
      ethereum.Value.fromAddress(_owner)
    ]);

    return result[0].toBigIntArray();
  }

  try_tokensOf(_owner: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("tokensOf", "tokensOf(address):(uint256[])", [
      ethereum.Value.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  collectionBaseItemPriceOf(_collectionBaseItemId: BigInt): BigInt {
    let result = super.call(
      "collectionBaseItemPriceOf",
      "collectionBaseItemPriceOf(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_collectionBaseItemId)]
    );

    return result[0].toBigInt();
  }

  try_collectionBaseItemPriceOf(
    _collectionBaseItemId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collectionBaseItemPriceOf",
      "collectionBaseItemPriceOf(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_collectionBaseItemId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  m_asset(): Address {
    let result = super.call("m_asset", "m_asset():(address)", []);

    return result[0].toAddress();
  }

  try_m_asset(): ethereum.CallResult<Address> {
    let result = super.tryCall("m_asset", "m_asset():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenLastPrice(param0: BigInt): BigInt {
    let result = super.call(
      "tokenLastPrice",
      "tokenLastPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_tokenLastPrice(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenLastPrice",
      "tokenLastPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isCollectionBaseItemActive(_collectionBaseItemId: BigInt): boolean {
    let result = super.call(
      "isCollectionBaseItemActive",
      "isCollectionBaseItemActive(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_collectionBaseItemId)]
    );

    return result[0].toBoolean();
  }

  try_isCollectionBaseItemActive(
    _collectionBaseItemId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isCollectionBaseItemActive",
      "isCollectionBaseItemActive(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_collectionBaseItemId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  collectibleInfo(
    _collectibleId: BigInt
  ): CollectiblesOwnership__collectibleInfoResult {
    let result = super.call(
      "collectibleInfo",
      "collectibleInfo(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,string,string)",
      [ethereum.Value.fromUnsignedBigInt(_collectibleId)]
    );

    return new CollectiblesOwnership__collectibleInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toString(),
      result[9].toString()
    );
  }

  try_collectibleInfo(
    _collectibleId: BigInt
  ): ethereum.CallResult<CollectiblesOwnership__collectibleInfoResult> {
    let result = super.tryCall(
      "collectibleInfo",
      "collectibleInfo(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,string,string)",
      [ethereum.Value.fromUnsignedBigInt(_collectibleId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CollectiblesOwnership__collectibleInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toString(),
        value[9].toString()
      )
    );
  }

  cooAddress(): Address {
    let result = super.call("cooAddress", "cooAddress():(address)", []);

    return result[0].toAddress();
  }

  try_cooAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("cooAddress", "cooAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  m_collectionBaseItem(): Address {
    let result = super.call(
      "m_collectionBaseItem",
      "m_collectionBaseItem():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_m_collectionBaseItem(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "m_collectionBaseItem",
      "m_collectionBaseItem():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dadaPercentage(): BigInt {
    let result = super.call("dadaPercentage", "dadaPercentage():(uint256)", []);

    return result[0].toBigInt();
  }

  try_dadaPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dadaPercentage",
      "dadaPercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOwnerPercentage(): BigInt {
    let result = super.call(
      "tokenOwnerPercentage",
      "tokenOwnerPercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_tokenOwnerPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOwnerPercentage",
      "tokenOwnerPercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  artistPercentage(): BigInt {
    let result = super.call(
      "artistPercentage",
      "artistPercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_artistPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "artistPercentage",
      "artistPercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  artistPercentageFirstBuy(): BigInt {
    let result = super.call(
      "artistPercentageFirstBuy",
      "artistPercentageFirstBuy():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_artistPercentageFirstBuy(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "artistPercentageFirstBuy",
      "artistPercentageFirstBuy():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawalAddress(): Address {
    let result = super.call(
      "withdrawalAddress",
      "withdrawalAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_withdrawalAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "withdrawalAddress",
      "withdrawalAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCollectionBaseItemId(_collectibleId: BigInt): BigInt {
    let result = super.call(
      "getCollectionBaseItemId",
      "getCollectionBaseItemId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_collectibleId)]
    );

    return result[0].toBigInt();
  }

  try_getCollectionBaseItemId(
    _collectibleId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCollectionBaseItemId",
      "getCollectionBaseItemId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_collectibleId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  m_exhibit(): Address {
    let result = super.call("m_exhibit", "m_exhibit():(address)", []);

    return result[0].toAddress();
  }

  try_m_exhibit(): ethereum.CallResult<Address> {
    let result = super.tryCall("m_exhibit", "m_exhibit():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class SetWithdrawalAddressCall extends ethereum.Call {
  get inputs(): SetWithdrawalAddressCall__Inputs {
    return new SetWithdrawalAddressCall__Inputs(this);
  }

  get outputs(): SetWithdrawalAddressCall__Outputs {
    return new SetWithdrawalAddressCall__Outputs(this);
  }
}

export class SetWithdrawalAddressCall__Inputs {
  _call: SetWithdrawalAddressCall;

  constructor(call: SetWithdrawalAddressCall) {
    this._call = call;
  }

  get _newWithdrawalAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetWithdrawalAddressCall__Outputs {
  _call: SetWithdrawalAddressCall;

  constructor(call: SetWithdrawalAddressCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class SetCEOCall extends ethereum.Call {
  get inputs(): SetCEOCall__Inputs {
    return new SetCEOCall__Inputs(this);
  }

  get outputs(): SetCEOCall__Outputs {
    return new SetCEOCall__Outputs(this);
  }
}

export class SetCEOCall__Inputs {
  _call: SetCEOCall;

  constructor(call: SetCEOCall) {
    this._call = call;
  }

  get _newCEO(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCEOCall__Outputs {
  _call: SetCEOCall;

  constructor(call: SetCEOCall) {
    this._call = call;
  }
}

export class SetCOOCall extends ethereum.Call {
  get inputs(): SetCOOCall__Inputs {
    return new SetCOOCall__Inputs(this);
  }

  get outputs(): SetCOOCall__Outputs {
    return new SetCOOCall__Outputs(this);
  }
}

export class SetCOOCall__Inputs {
  _call: SetCOOCall;

  constructor(call: SetCOOCall) {
    this._call = call;
  }

  get _newCOO(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCOOCall__Outputs {
  _call: SetCOOCall;

  constructor(call: SetCOOCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class PerformProfitDistributionCall extends ethereum.Call {
  get inputs(): PerformProfitDistributionCall__Inputs {
    return new PerformProfitDistributionCall__Inputs(this);
  }

  get outputs(): PerformProfitDistributionCall__Outputs {
    return new PerformProfitDistributionCall__Outputs(this);
  }
}

export class PerformProfitDistributionCall__Inputs {
  _call: PerformProfitDistributionCall;

  constructor(call: PerformProfitDistributionCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _collectionBaseItemId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PerformProfitDistributionCall__Outputs {
  _call: PerformProfitDistributionCall;

  constructor(call: PerformProfitDistributionCall) {
    this._call = call;
  }
}

export class SetCFOCall extends ethereum.Call {
  get inputs(): SetCFOCall__Inputs {
    return new SetCFOCall__Inputs(this);
  }

  get outputs(): SetCFOCall__Outputs {
    return new SetCFOCall__Outputs(this);
  }
}

export class SetCFOCall__Inputs {
  _call: SetCFOCall;

  constructor(call: SetCFOCall) {
    this._call = call;
  }

  get _newCFO(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCFOCall__Outputs {
  _call: SetCFOCall;

  constructor(call: SetCFOCall) {
    this._call = call;
  }
}

export class PushCollectibleCall extends ethereum.Call {
  get inputs(): PushCollectibleCall__Inputs {
    return new PushCollectibleCall__Inputs(this);
  }

  get outputs(): PushCollectibleCall__Outputs {
    return new PushCollectibleCall__Outputs(this);
  }
}

export class PushCollectibleCall__Inputs {
  _call: PushCollectibleCall;

  constructor(call: PushCollectibleCall) {
    this._call = call;
  }

  get _collectionBaseItemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _issuedTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PushCollectibleCall__Outputs {
  _call: PushCollectibleCall;

  constructor(call: PushCollectibleCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class WithdrawBalanceCall extends ethereum.Call {
  get inputs(): WithdrawBalanceCall__Inputs {
    return new WithdrawBalanceCall__Inputs(this);
  }

  get outputs(): WithdrawBalanceCall__Outputs {
    return new WithdrawBalanceCall__Outputs(this);
  }
}

export class WithdrawBalanceCall__Inputs {
  _call: WithdrawBalanceCall;

  constructor(call: WithdrawBalanceCall) {
    this._call = call;
  }
}

export class WithdrawBalanceCall__Outputs {
  _call: WithdrawBalanceCall;

  constructor(call: WithdrawBalanceCall) {
    this._call = call;
  }
}

export class EmitCollectibleIssuedEventCall extends ethereum.Call {
  get inputs(): EmitCollectibleIssuedEventCall__Inputs {
    return new EmitCollectibleIssuedEventCall__Inputs(this);
  }

  get outputs(): EmitCollectibleIssuedEventCall__Outputs {
    return new EmitCollectibleIssuedEventCall__Outputs(this);
  }
}

export class EmitCollectibleIssuedEventCall__Inputs {
  _call: EmitCollectibleIssuedEventCall;

  constructor(call: EmitCollectibleIssuedEventCall) {
    this._call = call;
  }

  get _collectibleOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _purchaser(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _collectibleId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _collectionBaseItemId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _issuedTime(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _printNumber(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class EmitCollectibleIssuedEventCall__Outputs {
  _call: EmitCollectibleIssuedEventCall;

  constructor(call: EmitCollectibleIssuedEventCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class UpgradeCollectionBaseItemModelContractCall extends ethereum.Call {
  get inputs(): UpgradeCollectionBaseItemModelContractCall__Inputs {
    return new UpgradeCollectionBaseItemModelContractCall__Inputs(this);
  }

  get outputs(): UpgradeCollectionBaseItemModelContractCall__Outputs {
    return new UpgradeCollectionBaseItemModelContractCall__Outputs(this);
  }
}

export class UpgradeCollectionBaseItemModelContractCall__Inputs {
  _call: UpgradeCollectionBaseItemModelContractCall;

  constructor(call: UpgradeCollectionBaseItemModelContractCall) {
    this._call = call;
  }

  get newCollectionBaseItemModelContractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeCollectionBaseItemModelContractCall__Outputs {
  _call: UpgradeCollectionBaseItemModelContractCall;

  constructor(call: UpgradeCollectionBaseItemModelContractCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class SetClaimEnablerCall extends ethereum.Call {
  get inputs(): SetClaimEnablerCall__Inputs {
    return new SetClaimEnablerCall__Inputs(this);
  }

  get outputs(): SetClaimEnablerCall__Outputs {
    return new SetClaimEnablerCall__Outputs(this);
  }
}

export class SetClaimEnablerCall__Inputs {
  _call: SetClaimEnablerCall;

  constructor(call: SetClaimEnablerCall) {
    this._call = call;
  }

  get claimEnablerContractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetClaimEnablerCall__Outputs {
  _call: SetClaimEnablerCall;

  constructor(call: SetClaimEnablerCall) {
    this._call = call;
  }
}

export class UpgradeExhibitModelContractCall extends ethereum.Call {
  get inputs(): UpgradeExhibitModelContractCall__Inputs {
    return new UpgradeExhibitModelContractCall__Inputs(this);
  }

  get outputs(): UpgradeExhibitModelContractCall__Outputs {
    return new UpgradeExhibitModelContractCall__Outputs(this);
  }
}

export class UpgradeExhibitModelContractCall__Inputs {
  _call: UpgradeExhibitModelContractCall;

  constructor(call: UpgradeExhibitModelContractCall) {
    this._call = call;
  }

  get newExhibitModelContractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeExhibitModelContractCall__Outputs {
  _call: UpgradeExhibitModelContractCall;

  constructor(call: UpgradeExhibitModelContractCall) {
    this._call = call;
  }
}

export class PurchaseOneUnitInStockCall extends ethereum.Call {
  get inputs(): PurchaseOneUnitInStockCall__Inputs {
    return new PurchaseOneUnitInStockCall__Inputs(this);
  }

  get outputs(): PurchaseOneUnitInStockCall__Outputs {
    return new PurchaseOneUnitInStockCall__Outputs(this);
  }
}

export class PurchaseOneUnitInStockCall__Inputs {
  _call: PurchaseOneUnitInStockCall;

  constructor(call: PurchaseOneUnitInStockCall) {
    this._call = call;
  }

  get _collectionBaseItemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PurchaseOneUnitInStockCall__Outputs {
  _call: PurchaseOneUnitInStockCall;

  constructor(call: PurchaseOneUnitInStockCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class UpgradeAssetModelContractCall extends ethereum.Call {
  get inputs(): UpgradeAssetModelContractCall__Inputs {
    return new UpgradeAssetModelContractCall__Inputs(this);
  }

  get outputs(): UpgradeAssetModelContractCall__Outputs {
    return new UpgradeAssetModelContractCall__Outputs(this);
  }
}

export class UpgradeAssetModelContractCall__Inputs {
  _call: UpgradeAssetModelContractCall;

  constructor(call: UpgradeAssetModelContractCall) {
    this._call = call;
  }

  get newAssetModelContractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeAssetModelContractCall__Outputs {
  _call: UpgradeAssetModelContractCall;

  constructor(call: UpgradeAssetModelContractCall) {
    this._call = call;
  }
}

export class SetAuthorizationStatusCall extends ethereum.Call {
  get inputs(): SetAuthorizationStatusCall__Inputs {
    return new SetAuthorizationStatusCall__Inputs(this);
  }

  get outputs(): SetAuthorizationStatusCall__Outputs {
    return new SetAuthorizationStatusCall__Outputs(this);
  }
}

export class SetAuthorizationStatusCall__Inputs {
  _call: SetAuthorizationStatusCall;

  constructor(call: SetAuthorizationStatusCall) {
    this._call = call;
  }

  get _authorizedAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _authorizedStatus(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetAuthorizationStatusCall__Outputs {
  _call: SetAuthorizationStatusCall;

  constructor(call: SetAuthorizationStatusCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get exhibitModelContractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get assetModelContractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get collectionBaseItemModelContractAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
